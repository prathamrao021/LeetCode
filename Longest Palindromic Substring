class Solution:
    def longestPalindrome(self, s: str) -> str:
        left = 1
        right = 1
        pal_stack = [[0,0]]
        cur_len = 0
        pre_len = 1
        left_index = 0
        right_index = 0
        
        if len(s) == 2:
            if(s[0]==s[1]):
                # pal_stack.append([0,1])
                right_index = 1
        
        for (ind,i) in enumerate(s):
            
            left = ind
            right = ind
            left1 = ind
            right1 = ind+1
            
            while left>=0 and right<=len(s)-1:
                # print(pal_stack)
                if (s[left] == s[right]):
                    cur_len = right-left+1
                    pre_len = right_index - left_index + 1
                    if(cur_len > pre_len):
                        left_index = left
                        right_index = right
                        # pal_stack.append([left,right])
                    left -= 1
                    right += 1 
                else:
                    break
                    
            while left1>=0 and right1<=len(s)-1:
                # print(pal_stack)
                if s[right1] == s[left1]:
                    cur_len = right1-left1+1
                    pre_len = right_index - left_index + 1
                    if(cur_len > pre_len):
                        # pal_stack.append([left1,right1])
                        left_index = left1
                        right_index = right1
                    left1 -= 1
                    right1 += 1
                else:
                    break
        return s[left_index:right_index+1]
